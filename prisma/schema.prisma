generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mesocycle {
  id        Int            @id @default(autoincrement())
  name      String
  user      User           @relation(fields: [userId], references: [id])
  userId    Int            @map("user_id")
  days      MesocycleDay[]
  createdAt DateTime       @default(now()) @map("created_at")

  @@unique([name, userId])
  @@map("mesocycles")
}

model MesocycleDay {
  id          Int                    @id @default(autoincrement())
  name        String
  order       Int
  notes       String?
  mesocycle   Mesocycle              @relation(fields: [mesocycleId], references: [id])
  mesocycleId Int                    @map("mesocycle_id")
  exercises   MesocycleDayExercise[]
  createdAt   DateTime               @default(now()) @map("created_at")

  @@unique([name, mesocycleId])
  @@map("mesocycles_days")
}

model MesocycleDayExercise {
  id         Int                       @id @default(autoincrement())
  number     Int
  notes      String?
  day        MesocycleDay              @relation(fields: [dayId], references: [id])
  dayId      Int                       @map("day_id")
  exercise   Exercise                  @relation(fields: [exerciseId], references: [id])
  exerciseId Int                       @map("exercise_id")
  sets       MesocycleDayExerciseSet[]
  createdAt  DateTime                  @default(now()) @map("created_at")

  @@map("mesocycles_days_exercises")
}

model MesocycleDayExerciseSet {
  id          Int                  @id @default(autoincrement())
  number      Int
  repRange    String               @map("rep_range")
  weight      Float?
  rir         Int
  restSeconds Int?                 @map("rest_seconds")
  notes       String?
  exercise    MesocycleDayExercise @relation(fields: [exerciseId], references: [id])
  exerciseId  Int                  @map("exercise_id")
  createdAt   DateTime             @default(now()) @map("created_at")

  @@map("mesocycles_days_exercises_sets")
}

model Exercise {
  id             Int                    @id @default(autoincrement())
  name           String
  unilateral     Boolean                @default(false)
  user           User                   @relation(fields: [userId], references: [id])
  userId         Int                    @map("user_id")
  mesocyclesDays MesocycleDayExercise[]
  createdAt      DateTime               @default(now()) @map("created_at")

  @@unique([name, userId])
  @@map("exercises")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  passwordHash String      @map("password_hash")
  exercises    Exercise[]
  mesocycles   Mesocycle[]
  createdAt    DateTime    @default(now()) @map("created_at")

  @@map("users")
}
